var http = require('http'),
    util = require('util');

var Request = exports.Request = function (props) {
    http.IncomingMessage.call(this);
    for (var i in props) this[i] = props[i];
};

util.inherits(Request, http.IncomingMessage);

var Response = exports.Response = function () {
    http.OutgoingMessage.call(this);
    this.useChunkedEncodingByDefault = false;
    this.shouldKeepAlive = false;
};

util.inherits(Response, http.OutgoingMessage);

Response.prototype.statusCode = 200;

Response.prototype._implicitHeader = function() {
    this._storeHeader('HTTP/1.1 ' + this.statusCode.toString() + ' ' + http.STATUS_CODES[this.statusCode] + '\r\n', this._renderHeaders());
}

Response.prototype.end = function() {
    http.OutgoingMessage.prototype.end.apply(this, arguments);
    this.finished = true;
    this.emit('finish');
}

Response.prototype.match = function(re) {
    var content = this.output.join();
    if (this._header) {
        content = content.slice(this._header.length);
    }
    return typeof re == 'string' ? content === re : content.match(re);
}
