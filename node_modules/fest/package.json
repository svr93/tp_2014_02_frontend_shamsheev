{
  "name": "fest",
  "description": "JavaScript Templates",
  "keywords": [
    "template",
    "templating",
    "html",
    "xml"
  ],
  "version": "0.8.2",
  "repository": {
    "type": "git",
    "url": "http://github.com/mailru/fest.git"
  },
  "author": {
    "name": "Andrew Sumin",
    "email": "AndrewSumin@mail.ru"
  },
  "contributors": [
    {
      "name": "Anton Eprev",
      "email": "a.eprev@gmail.com"
    },
    {
      "name": "Lebedev Konstantin",
      "email": "ibnrubaxa@gmail.com"
    },
    {
      "name": "Max Maximov",
      "email": "max.maximov@gmail.com"
    },
    {
      "name": "Vladimir Rudnyh",
      "email": "dreadatour@gmail.com"
    },
    {
      "name": "Artem Tyurin"
    }
  ],
  "main": "./lib/fest",
  "bin": {
    "fest-proxy": "./bin/fest-proxy",
    "fest-build": "./bin/fest-build",
    "fest-render": "./bin/fest-render",
    "fest-compile": "./bin/fest-compile",
    "po2js": "./bin/po2js"
  },
  "engines": {
    "node": ">= 0.8"
  },
  "scripts": {
    "test": "grunt test --verbose"
  },
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-watch": "~0.2.0",
    "jasmine-node": "~1.3.0"
  },
  "readme": "# Fest [![Build Status](https://travis-ci.org/mailru/fest.png?branch=0.8)](https://travis-ci.org/mailru/fest)\n\nFest — это шаблонизатор общего назначения, компилирующий XML шаблоны в самодостаточные JavaScript функции. Для установки требуется Node.js >= 0.8.\n\n## Установка\n\n```\nnpm install fest\n```\n\n## Введение\n\nШаблоны представляют собой XML документы, содержащие HTML, текстовые данные и управляющие конструкции. Шаблон задается парным элементом `<fest:template>` (с указанием пространства имен `http://fest.mail.ru`). Например:\n\n```xml\n<fest:template xmlns:fest=\"http://fest.mail.ru\">\n    Hello!\n</fest:template>\n```\n\nДанные передаваемые в шаблон, доступны через переменную с именем, указанным в атрибуте `context_name` элемента `fest:template`:\n\n```xml\n<fest:template xmlns:fest=\"http://fest.mail.ru\" context_name=\"json\">\n    Hello, <fest:value>json.name</fest:value>!\n</fest:template>\n```\n\nЧтобы посмотреть результат работы, приведенных выше шаблонов, необходимо воспользоваться встроенной утилитой fest-render или API библиотеки.\n\n### fest-render\n\nУтилита `fest-render` используется для компиляции и последующего запуска скомпилированного шаблона из командной строки. В таком случае, для передачи данных в шаблон используется JSON-файл.\n\nhello.json\n```json\n{\"name\": \"John\"}\n```\n\nhello.xml\n```xml\n<fest:template xmlns:fest=\"http://fest.mail.ru\" context_name=\"json\">\n  Hello, <fest:value>json.name</fest:value>!\n</fest:template>\n```\n\n```\n$ ./node_modules/.bin/fest-render --json=hello.json hello.xml\nHello,John!\n```\n\n_Замечание: начальные и конечные пробелы в текстовых узлах удаляются при компиляции. Если необходимо вывести символ пробела, можно вопспользоваться `fest:space`._\n\n### render()\n\nФункция `render()` API компилирует и исполняет шаблон с заданными параметрами.\n\nhello.js\n```javascript\nvar fest = require('fest');\nconsole.log(fest.render('hello.xml'), {name: 'John'});\n```\n\n```\n$ node ./hello.js\nHello,John!\n```\n## Данные и вывод\n\n### fest:value\n\nСлужит для вывода значения JavaScript выражения. Поддерживаем 4 режима вывода: html (по умолчанию), text, js и json.\n\n```xml\n<fest:script><![CDATA[\n    var value = '\"<script/>\"';\n]]></fest:script>\n<fest:value>value</fest:value><!-- &quot;&lt;script/&gt;&quot; -->\n<fest:value output=\"text\">value</fest:value><!-- \"<script/>\" -->\n<fest:value output=\"js\">value</fest:value><!-- \\\"\\u003Cscript\\/\\u003E\\\" -->\n<fest:value output=\"json\">value</fest:value><!-- \"\\\"\\u003Cscript/\\u003E\\\"\" -->\n```\n\n### fest:var\n\nУстаналивает локальную JavaScript переменную.\n\n```xml\n<fest:var name=\"question\">Ultimate Question of Life, The Universe, and Everything</fest:var>\n<fest:value>question</fest:value><!-- Ultimate Question of Life, The Universe, and Everything -->\n<fest:var name=\"answer\" select=\"question.length - 13\" />\n<fest:value>answer</fest:value><!-- 42  -->\n```\n\n### fest:text\n\nВыводит неформатированный текст.\n\n```xml\n<fest:text>\"Hello\"</fest:text><!-- \"Hello\" -->\n```\n\n### fest:space\n\nСлужит для вывода пробела. Необходим в тех случаях, когда пробел в тектовом узле удаляется при компиляции, например:\n\n```xml\nHello,<fest:space/><fest:value>json.name</fest:value>!<!-- Hello, John! -->\n```\n\n### fest:set\n\nОбъявляет именованный подшаблон. Содержимое `fest:set` не будет выполнено до тех пор, пока не будет вызван блок с таким же имененем с помощью `fest:get`.\n\n```xml\n<fest:set name=\"name\">John</fest:set>\n```\n\n```xml\n<fest:set name=\"full_name\">\n    <fest:get name=\"name\"/><fest:space/>F. Kennedy\n</fest:set>\n```\n\nДля `fest:set` можно использовать атрибут `test`. Операция выполнится, если его значение (JavaScript выражение) истинно.\n\n```xml\n<fest:set name=\"name\" test=\"false\">should not be set</fest:set>\n```\n\nВнутри `fest:set` доступен контекст `params`, передаваемый через `fest:get`.\n\n```xml\n<fest:set name=\"line\">\n    Hello,<fest:space/><fest:value>params.username</fest:value>!\n</fest:set>\n<fest:get name=\"line\">{username: \"John\"}</fest:get><!-- Hello, John! -->\n```\n\n### fest:get\n\nВыводит содержимое блока, объявленного через `fest:set`.\n\n```xml\n<fest:get name=\"name\"/>\n```\n\n```xml\n<fest:get name=\"name\">{'some': 'data'}</fest:get>\n```\n\nС помощью `fest:param` можно передавать в блок XML-данные.\n\n```xml\n<fest:get name=\"page\">\n    <fest:param name=\"doctype\">html</fest:param>\n    <fest:params>\n        {\n            title: json.title\n        }\n    </fest:params>\n    <fest:param name=\"content\">\n        <article>\n            <fest:if test=\"json.title\">\n                <h1><fest:value>json.title</fest:value></h1>\n            </fest:if>\n        </article>\n    </fest:param>\n</fest:get>\n<fest:set name=\"page\">\n    <fest:doctype><fest:value>params.doctype</fest:value></fest:doctype>\n    <title><fest:value>params.title</fest:value></title>\n    <body>\n        <fest:value output=\"text\">params.content</fest:value>\n    </body>\n</fest:set>\n```\n\nВнутри атрибута `name` можно использовать JavaScript выражения для вычисления имени блока во время выполнения. Значения выражений, заключенных в фигурные скобки, объединяются с примыкающим текстом. Помимо этого, можно использовать атрибут `select`.\n\n```xml\n<fest:script>\n    var name = 'foo'\n</fest:script>\n<fest:get select=\"name\"/><!-- foo -->\n<fest:set name=\"foo\">foo</fest:set>\n<fest:set name=\"bar\">bar</fest:set>\n<fest:get name=\"b{true?'a':''}r\"/><!-- bar -->\n```\n\n### fest:element\n\nВыводит HTML элемент с переменным именем.\n\n```xml\n<fest:element name=\"div\" />\n<fest:script>\n    var variable = 'table';\n</fest:script>\n<fest:element select=\"variable\">\n    fest code\n</fest:element>\n<fest:element name=\"{variable2}\">\n    fest code\n</fest:element>\n```\n\nРезультат:\n\n```xml\n<div></div><table>fest code</table><div>fest code</div>\n```\n\n### fest:attributes, fest:attribute\n\nДобавляет атрибуты к родительскому элементы. Все `fest:attribute` должны быть внутри блока `fest:attributes`, который должен идти первым внутри элемента.\n\n```xml\n<a>\n    <fest:attributes>\n        <fest:attribute name=\"href\"><fest:value>json.href</fest:value></fest:attribute>\n    </fest:attributes>\n    Some link\n</a>\n```\n\nСуществует быстрый способ вывести значение в атрибут:\n\n```xml\n<a href=\"{json.href}\">Some link</a>\n```\n\nИмена атрибутов можно вычислять в момент исполнения шаблона:\n\n```xml\n<div>\n    <fest:attributes>\n        <fest:attribute name=\"data-{json.name}\" value=\"{json.value}\" />\n    </fest:attributes>\n</div>\n```\n\n## Управляющие конструкции\n\n### fest:each\n\nПредоставляет механизм итерации по объекту.\n\n```xml\n<fest:script>var obj = {\"foo\": \"bar\"}</fest:script>\n<fest:each iterate=\"obj\" index=\"i\">\n    <fest:value>i</fest:value>=<fest:value>obj[i]</fest:value><!-- foo=bar -->\n</fest:each>\n<fest:each iterate=\"obj\" index=\"i\" value=\"v\">\n    <fest:value>i</fest:value>=<fest:value>v</fest:value><!-- foo=bar -->\n</fest:each>\n```\n\n### fest:for\n\nВыполняет итерацию по массиву или числовому ряду.\n\n```xml\n<fest:script>json.items = ['a', 'b', 'c']</fest:script>\n<fest:for iterate=\"json.items\" index=\"i\">\n    <fest:value>json.items[i]</fest:value><!-- abc -->\n</fest:for>\n<fest:for iterate=\"json.items\" index=\"i\" value=\"v\">\n    <fest:value>v</fest:value><!-- abc -->\n</fest:for>\n<fest:for from=\"1\" to=\"5\" index=\"i\">\n    <fest:value>i</fest:value><!-- 12345 -->\n</fest:for>\n```\n\n### fest:if\n\nУсловный оператор.\n\n```xml\n<fest:if test=\"true\">\n    It's true!\n</fest:if>\n```\n\n### fest:choose, fest:when, fest:otherwise\n\nВетвление. Если ни у одного `fest:when` условие не выполнено, будет выбрана ветвь `fest:otherwise`.\n\n```xml\n<fest:choose>\n    <fest:when test=\"1\">\n        <fest:text>one</fest:text>\n    </fest:when>\n\n    <fest:when test=\"2\">\n        <fest:text>two</fest:text>\n    </fest:when>\n\n    <fest:otherwise>\n        <fest:text>More than 2</fest:text>\n    </fest:otherwise>\n</fest:choose>\n```\n\n## Остальные конструкции\n\n### fest:cdata\n\nСлужит для вывода блока CDATA.\n\n```xml\n<script>\n    <fest:cdata>\n        <![CDATA[alert (\"2\" < 3);]]>\n    </fest:cdata>\n</script>\n```\n\n### fest:comment\n\nВыводит HTML комментарий.\n\n```xml\n<fest:comment>comment</fest:comment>\n```\n\n### fest:doctype\n\nЗадает DOCTYPE генерируемой страницы.\n\n```xml\n<fest:doctype>html</fest:doctype>\n```\n\n### fest:script\n\nСлужит для выполнения произвольного JavaScript.\n\n```xml\n<fest:script>\n    <![CDATA[\n        json.script = 2 < 3;\n    ]]>\n</fest:script>\n```\n\nСодержимое `fest:script` можно загрузить из файла, указав в атрибуте `src` путь к нему.\n\n```xml\n<fest:script src=\"script.js\"/>\n```\n\n### fest:include\n\nВставляет содержимое другого шаблона с заданным контекстом.\n\n```xml\n<fest:script>json.list = ['a', 'b', 'c'];</fest:script>\n<fest:include context=\"json.list\" src=\"./include_foreach.xml\"/>\n```\n\n### fest:insert\n\nВыводит содержимое файла:\n\n```xml\n<style type=\"text/css\">\n    <fest:insert src=\"style.css\"/>\n<style>\n```\n\n# Примеры\n\n## Использование\n\nКомпиляция с помощью compile():\n```javascript\nvar fest = require('fest');\n\nvar data = {name: 'Jack \"The Ripper\"'},\n    template = './templates/basic.xml';\n\nvar compiled = fest.compile(template, {beautify: false}),\n    template = (new Function('return ' + compiled))();\n\nconsole.log(template(data));\n```\n\nКомпиляция с последующей отрисовкой с помощью render():\n```javascript\nvar fest = require('fest');\n\nvar data = {name: 'Jack \"The Ripper\"'},\n    template = './templates/basic.xml';\n\nconsole.log(fest.render(template, data, {beautify: false}));\n```\n\nbasic.xml\n```xml\n<?xml version=\"1.0\"?>\n<fest:template xmlns:fest=\"http://fest.mail.ru\" context_name=\"json\">\n    <h1>Hello,<fest:space/><fest:value output=\"text\">json.name</fest:value></h1>\n    <!-- По умолчанию все значения fest:value экранируются -->\n    <!--\n        Необходимо использовать fest:space или\n        fest:text для явного указания строк с пробелами\n    -->\n</fest:template>\n```\n\nРезультат:\n\n```html\n<h1>Hello, Jack \"The Ripper\"</h1>\n```\n\n## Вложенные шаблоны\n\nДанные на вход:\n```javascript\nvar data = {\n    people: [\n        {name: 'John', age: 20},\n        {name: 'Mary', age: 21},\n        {name: 'Gary', age: 55}\n    ],\n    append: '>>'\n}\n```\n\nforeach.xml (основной шаблон):\n```xml\n<?xml version=\"1.0\"?>\n<fest:template xmlns:fest=\"http://fest.mail.ru\" context_name=\"json\">\n\n    <!-- Контекст можно передавать во вложенные шаблоны -->\n    <fest:include context_name=\"json\" src=\"./person.xml\"/>\n\n    <!-- Значением iterate может быть любое js-выражение -->\n    <fest:for iterate=\"json.people.reverse()\" index=\"i\">\n        <!-- Передаваемые значения будут доступны в контексте params -->\n        <fest:get name=\"person\">json.people[i]</fest:get>\n    </fest:for>\n</fest:template>\n```\n\nperson.xml:\n```xml\n<?xml version=\"1.0\"?>\n<fest:template xmlns:fest=\"http://fest.mail.ru\" context_name=\"json\">\n\n    <!--\n        Используем set для объявления блока,\n        который используем в родительском шаблоне\n    -->\n    <fest:set name=\"person\">\n        <p>\n            <fest:script><![CDATA[\n                var first = params.name[0],\n                    other = params.name.slice(1);\n            ]]></fest:script>\n            <fest:value>json.append</fest:value>\n            <strong>\n                <fest:value>first</fest:value>\n            </strong>\n            <fest:value>other</fest:value>\n        </p>\n    </fest:set>\n</fest:template>\n```\n\nРезультат:\n```html\n<p>&gt;&gt;<strong>G</strong>ary</p>\n<p>&gt;&gt;<strong>M</strong>ary</p>\n<p>&gt;&gt;<strong>J</strong>ohn</p>\n```\n\n## Использование set и get\n\n```xml\n<?xml version=\"1.0\"?>\n<fest:template xmlns:fest=\"http://fest.mail.ru\" context_name=\"json\">\n    <fest:set name=\"host\">http://e.mail.ru</fest:set>\n    <fest:set name=\"all\">msglist</fest:set>\n    <fest:set name=\"new\">sentmsg?compose</fest:set>\n\n    <fest:set name=\"all_link\">\n        <fest:get name=\"host\"/>/<fest:get name=\"all\"/>\n    </fest:set>\n\n    <fest:set name=\"new_link\">\n        <fest:get name=\"host\"/>/<fest:get name=\"new\"/>\n    </fest:set>\n\n    <ul>\n        <!-- fest:attribute добавляет параметр к родительскому тегу -->\n        <li><a>\n            <fest:attributes>\n                <fest:attribute name=\"href\"><fest:get name=\"all_link\"/></fest:attribute>\n            </fest:attributes>\n            Все сообщения\n        </a></li>\n\n        <li><a>\n            <fest:attributes>\n                <fest:attribute name=\"href\"><fest:get name=\"new_link\"/></fest:attribute>\n            </fest:attributes>\n            Написать письмо\n        </a></li>\n    </ul>\n</fest:template>\n```\n\nРезультат:\n\n```html\n<ul>\n    <li><a href=\"http://e.mail.ru/msglist\">Все сообщения</a></li>\n    <li><a href=\"http://e.mail.ru/sentmsg?compose\">Написать письмо</a></li>\n</ul>\n```\n\n## Интернационализация\n\n### fest:plural\n\nПо умолчанию доступна поддержка плюрализации для русского и английского языка. В параметрах `fest.compile` можно передать любую другую функцию плюрализации.\n\n```xml\n<fest:plural select=\"json.n\">один рубль|%s рубля|%s рублей</fest:plural>\n```\nИли англоязычный вариант:\n\n```xml\n<fest:plural select=\"json.n\">one ruble|%s rubles</fest:plural>\n```\n\nЧтобы вывести символ “%” внутри тега `fest:plural` используйте “%%”:\n\n```xml\n<fest:plural select=\"json.n\">…1%%…|…%s%%…|…%s%%…</fest:plural>\n```\n\n### fest:message и fest:msg\n\nПозволяет указать границы фразы для перевода и контекст для снятия многозначности. Например,\n\n```xml\n<fest:message context=\"растение\">Лук</fest:message>\n<fest:message context=\"оружие\">Лук</fest:message>\n```\n\nДля каждого `fest:message`, `fest:msg`, обычного текста, заключенного между XML тегами (опция `auto_message`), или текстового значения некоторых атрибутов компилятор вызывает функцию `events.message` (если такая была указана в параметрах). Данный механизм используется в `fest-build` утилите для построения оригинального PO-файла.\n\nПример вызова `fest-build` для создания PO-файла:\n\n```\n$ fest-build --dir=fest --po=ru_RU.po --compile.auto_message=true\n```\n\nПример компиляции локализованных шаблонов:\n\n```\n$ fest-build --dir=fest --translate=en_US.po\n```\n\nПример компиляции одного шаблона:\n\n```\n$ fest-compile path/to/template.xml\n$ fest-compile --out=path/to/compiled.js path/to/template.xml\n$ fest-compile --out=path/to/compiled.js --translate=path/to/en_US.po path/to/template.xml\n```\n\n## Contribution\n\nНеобходимо установить [Grunt](http://gruntjs.com):\n\n```\n$ git clone git@github.com:mailru/fest.git\n$ cd fest\n$ sudo npm install -g grunt-cli\n$ npm install\n$ grunt\n```\n\nGrunt используется для валидации JS (тестов) и запуска тестов. Перед отправкой пулл-риквеста убедись, что успешно выполнены `git rebase master` и `grunt`.\n\nЕсли необходимо пересобрать шаблоны spec/expected, то выполните:\n\n```\n$ ./bin/fest-build --dir=spec/templates --exclude='*error*' --compile.beautify=true --out=spec/expected/build/initial\n$ ./bin/fest-build --dir=spec/templates --exclude='*error*' --compile.beautify=true --out=spec/expected/build/translated --translate=spec/templates/en_US.po\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mailru/fest/issues"
  },
  "homepage": "https://github.com/mailru/fest",
  "_id": "fest@0.8.2",
  "_from": "fest@"
}
