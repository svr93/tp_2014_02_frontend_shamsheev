{
  "name": "grunt-fest",
  "description": "Compile Fest templates",
  "version": "0.1.5",
  "homepage": "https://github.com/eprev/grunt-fest",
  "author": {
    "name": "Anton Eprev",
    "email": "a.eprev@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/eprev/grunt-fest.git"
  },
  "bugs": {
    "url": "https://github.com/eprev/grunt-fest/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/eprev/grunt-fest/blob/master/LICENSE.md"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "fest": "0.8.2"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "0.7.2",
    "grunt-contrib-clean": "0.5.0",
    "grunt-contrib-nodeunit": "0.2.2",
    "grunt": "0.4.2"
  },
  "peerDependencies": {
    "grunt": "~0.4.0"
  },
  "keywords": [
    "gruntplugin",
    "fest"
  ],
  "readme": "# grunt-fest [![Build Status](https://travis-ci.org/eprev/grunt-fest.png)](https://travis-ci.org/eprev/grunt-fest)\n\n> Compile [Fest](https://github.com/mailru/fest) templates.\n\n## Getting Started\n\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-fest --save-dev\n```\n\nOne the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-fest');\n```\n\n## The \"fest\" task\n\n### Overview\n\nIn your project's Gruntfile, add a section named `fest` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n    fest: {\n        options: {\n            // Task-specific options go here.\n        },\n        target: {\n            options: {\n                // Target-specific options go here.\n            }\n        }\n    }\n})\n```\n\n### Options\n\n#### options.require\n\nType: `String`\nDefault value: `fest`\n\nPath to require Fest library.\n\n#### options.compile\n\nType: `Object`\nDefault value: `undefined`\n\nFest’s compile() options.\n\n#### options.ext\n\nType: `String`\nDefault value: `.js`\n\nCompiled file’s extension.\n\n#### options.name\n\nType: `String`\nDefault value: `undefined`\n\nCompiled function’s name. The basename of the source file will be used if is set to True.\n\n#### options.template\n\nType: `Function`\nDefault value: `undefined`\n\nThis function is called when template will be compiled. It takes an argument as an object with the following properties:\n\n* `src` — path to the template\n* `relSrc` — relative path to the template\n* `dest` — path to the compiled file\n* `name` — template’s name (relative to the source directory and w/o the extension)\n* `basename` — template’s basename\n* `contents` — compiled template\n\n### Usage Examples\n\n#### Static mappings\n\n```js\ngrunt.initConfig({\n    fest: {\n        options: {\n            compile: {\n                beautify: true,\n                debug: true\n            }\n        },\n\n        // Compiles \"fest/**/*.xml\" to \"fest/**/*.js\"\n        put_in_the_same_derictory: {\n            src: 'fest/**/*.xml'\n        },\n\n        // Compiles \"fest/**/*.xml\" to \"fest/**/*.xml.js\"\n        put_in_the_same_derictory_and_append_ext: {\n            src: 'fest/**/*.xml',\n            options: {\n                ext: '.xml.js'\n            }\n        },\n\n        // Compiles \"test/**/*.xml\" to \"build/fest/**/*.js\",\n        'build': ['fest/**/*.xml'],\n\n        // Compiles \"test/qux.xml\" to named function and writes it to \"build/qux.js\"\n        v8: {\n            src: 'fest/qux.xml',\n            dest 'build/qux.js',\n            options: {\n                name: 'qux'\n            }\n        }\n    }\n})\n```\n\n#### Dynamic mappings\n\nIn this example Fest compiles \"fest/**/*.xml\" to \"fest-build/**/*.js\". See [Building the files object dynamically](http://gruntjs.com/configuring-tasks#building-the-files-object-dynamically) documentation for more information.\n\n```js\ngrunt.initConfig({\n    fest: {\n        build: {\n            files: [{\n                expand: true,       // Enable dynamic expantion.\n                cwd: 'fest',        // Src matches are relative to this path.\n                src: ['**/*.xml'],  // Actual pattern(s) to match.\n                dest: 'fest-build', // Destination path prefix.\n                ext: '.js'          // Dest filepaths will have this extension.\n            }],\n            options: {\n                compile: {\n                    debug: false,\n                    beautify: false\n                }\n            }\n        }\n    }\n})\n```\n\n#### Template’s Usage\n\nIn this example Grunt builds AMD modules for the compiled templates.\n\n```js\ngrunt.initConfig({\n    fest: {\n        build: {\n            files: [{\n                expand: true,       // Enable dynamic expantion.\n                cwd: 'fest',        // Src matches are relative to this path.\n                src: ['**/*.xml'],  // Actual pattern(s) to match.\n                dest: 'fest-build', // Destination path prefix.\n                ext: '.js'          // Dest filepaths will have this extension.\n            }],\n            options: {\n                template: function (data) {\n                    // Make AMD module\n                    return grunt.template.process(\n                        'define(<%= JSON.stringify(name)  %>, function () { return <%= contents %> ; });',\n                        {data: data}\n                    );\n                },\n                compile: {\n                    debug: false,\n                    beautify: false\n                }\n            }\n        }\n    }\n});\n```\n\n## Contributing\n\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/). Before pull-request to dev branch do rebase.\n\n## Release History\n\n* 2013-11-27  v0.1.4  Upgraded dependencies\n* 2013-05-24  v0.1.3  Support for function name within dynamic mappings\n* 2013-03-13  v0.1.2  Added option to name compiled function\n* 2013-03-04  v0.1.1  Use of initial compile options\n* 2013-02-22  v0.1.0  First official release\n",
  "readmeFilename": "README.md",
  "_id": "grunt-fest@0.1.5",
  "_from": "grunt-fest@"
}
